import os
import pytz
import numpy as np
import pandas as pd
import sqlalchemy as sa
from ast import literal_eval
import collections
import json
import re
import string
import datetime
import pickle
import statistics
import datetime

import seaborn as sn
import matplotlib.pyplot as plt
%matplotlib inline 

from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

import warnings
warnings.filterwarnings('ignore')

pd.options.display.max_colwidth = 500
pd.options.display.max_rows = 150
pd.options.display.max_columns = 150

dbconn = sa.create_engine('postgresql://login:password@host/database')
dbconn_adapter = sa.create_engine('postgresql://login:password@host/database')
dbconn_new = sa.create_engine('postgresql://login:password@host/database')
db_clickhouse = sa.create_engine('clickhouse+native://login:password@host:port')

date_start = f"""2022-06-13 00:00:00""" 
date_end = f"""2022-06-14 00:00:00""" 

query = f"""
    SELECT DISTINCT id as event_id
         , name as event_name
         , created_at + interval '3 hours' as created_date
         , begin_date
         , tonality
         , status
         , author_id
         , audience_count
         , audience_count_max
         , creator_ea_id
         , criticality
         , duplicate_lead
         , unnest (plot) as plot_id
         , unnest (sphere) as sphere_id
    FROM events
    WHERE status in ('ACTIVE', 'PROCESSING', 'COMPLETED', 'ARCHIVED') 
      AND deleted_at is NULL
      AND created_at + interval '3 hours' > '{date_start}'
      AND created_at + interval '3 hours' < '{date_end}' 
"""
df_events = pd.read_sql(query, con=dbconn)
df_events['tonality'] = df_events['tonality'].fillna('NEUTRAL')
print(df_events.shape)
df_events.head(1)

query = f"""
    SELECT id as sphere_id, name as sphere
    FROM  dictionary_spheres
"""
df_sphere = pd.read_sql(query, con=dbconn)
print(df_sphere.shape)
df_sphere.head(1)

query = f"""
    SELECT id as plot_id, name as plot
    FROM dictionary_plots
"""
df_plot = pd.read_sql(query, con=dbconn)
print(df_plot.shape)
df_plot.head(1)

query = f"""
    SELECT object_id as event_id 
         , min(case when diff like '%%executive_authority%%' then time end) oiv_time
         , min(case when diff like '%%situation_id%%' then time end) sit_time 
         , min(case when diff ilike '%%status":"ACTIVE%%' then time end) active_time
    FROM logs.audit_log where object_type = 'event' 
     AND (diff like '%%executive_authority%%' OR diff like '%%situation_id%%') 
     AND object_type='event' 
    GROUP BY object_id
"""
df_dates = pd.read_sql(query, con=db_clickhouse)
print(df_dates.shape)

df_events = df_events.merge(df_sphere, how='left')
df_events = df_events.merge(df_plot, how='left')
df_events = df_events.merge(df_dates, how='left')
print(df_events.shape)
df_events.head(1)

df_plot = df_events[[
    'event_id', 'event_name',
    'created_date', 'status',
    'plot']].copy()
    
df_plot = df_plot[df_plot['plot'].notna()]

df_plot.rename(columns={
    'event_id':'ID',
    'event_name':'Наименование',
    'created_date':'Дата создания ИП',
    'status':'Статус',
    'plot':'Сюжет'}, inplace=True)
    
df_sphere = df_events[[
    'event_id', 'event_name',
    'created_date', 'status',
    'sphere']].copy()
    
df_sphere = df_sphere[df_sphere['sphere'].notna()]

df_sphere.rename(columns={
    'event_id':'ID',
    'event_name':'Наименование',
    'created_date':'Дата создания ИП',
    'status':'Статус',
    'sphere':'Сфера'}, inplace=True)
    
#Сфера
df_new_sphere = df_events['sphere'].value_counts().reset_index()
df_new_sphere = df_new_sphere.rename(columns={"index": "Сфера", "sphere": "Количество ИП"})
df_new_sphere

#Сфера по статусам
df_fin_sphere = df_events.groupby('sphere').status.value_counts().reset_index(name='count')
df_fin_sphere = df_fin_sphere.rename(columns={"sphere": "Сфера", "status": "Статус" , "count": "Количество ИП"})
df_fin_sphere

#Сюжет
df_new_plot = df_events['plot'].value_counts().reset_index()
df_new_plot = df_new_plot.rename(columns={"index": "Сюжет", "plot": "Количество ИП"})
df_new_plot

#Сюжет по статусам
df_fin_plot = df_events.groupby('plot').status.value_counts().reset_index(name='count')
df_fin_plot = df_fin_plot.rename(columns={"plot": "Сюжет", "status": "Статус" , "count": "Количество ИП"})
df_fin_plot

with pd.ExcelWriter('Сюжеты и сферы_13.06.xlsx', engine='xlsxwriter') as writer:
    df_new_plot.to_excel(writer, sheet_name='Сюжеты', startrow=0, startcol=0)
    df_fin_plot.to_excel(writer, sheet_name='Сюжеты по статусам', startrow=0, startcol=0)
    df_new_sphere.to_excel(writer, sheet_name='Сферы', startrow=0, startcol=0)
    df_fin_sphere.to_excel(writer, sheet_name='Сферы по статусам', startrow=0, startcol=0)
    df_plot.to_excel(writer, sheet_name='Сводка по сюжетам', startrow=0, startcol=0)
    df_sphere.to_excel(writer, sheet_name='Сводка по сферам', startrow=0, startcol=0)
